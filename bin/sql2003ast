#!perl
use strict;
use warnings FATAL => 'all';
use MarpaX::Languages::SQL2003::AST;
use POSIX qw/EXIT_SUCCESS EXIT_FAILURE/;
use Getopt::Long;
use Pod::Usage;
use IO::String;
use File::Slurp qw/read_file/;
use Data::Dumper;

# ABSTRACT: SQL-2003 AST

# VERSION

# PODNAME: sql2003ast

my $help = 0;
my $xml = 1;
my $trace_terminals = 0;
my $trace_values = 0;
my $host = '';
GetOptions ('help!' => \$help,
	    'xml!' => \$xml,
	    'trace_terminals!' => \$trace_terminals,
	    'trace_values!' => \$trace_values,
	    'host=s' => \$host);

if ($help || $#ARGV > 0) {
  my $pod = do {local $/; <DATA>};
  my $podfh = IO::String->new($pod);
  pod2usage(-verbose => 2, -noperldoc => 1, -input => $podfh, -exitval => $help ? EXIT_SUCCESS : EXIT_FAILURE);
}

my $input = @ARGV ? read_file(shift) : <STDIN>;
my $ast = MarpaX::Languages::SQL2003::AST->new(host => $host);
my %opts = (trace_terminals => $trace_terminals, trace_values => $trace_values);
print $xml ? $ast->asXML($input, %opts)->toString(1) : Dumper($ast->asBlessed($input, %opts));

exit(EXIT_SUCCESS);

__DATA__

# --------------------------------------------------------------------------------------

=head1 NAME

sql2003ast - SQL AST

=head1 SYNOPSIS

 sql2003ast [options] [file]

where options can be:

  --help            This help.
  --xml             XML mode. Default is a true value. Say --noxml for bless mode.
  --trace_terminals Trace terminals. Default is a false value.
  --trace_values    Trace AST values. Default is a false value.

and arguments can be:

  file          Input filename containing SQL statement

=head1 NOTES

Say --noxml to disable the XML mode, i.e. to use a blessed mode (i.e. a hierarchical structure of blessed perl's arrays).

=over

=item

  If file is absent or equal to '-', then STDIN is assumed.

=item

  Any ambiguous parse will result in a failure, with a hopefully clear stack trace.

=back

=head1 SEE ALSO

L<MarpaX::Languages::SQL2003::AST>
